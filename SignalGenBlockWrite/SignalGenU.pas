unit SignalGenU;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls;

const
//количество записываемых пакетов. за раз
NUM_WRITE_POCKET=5000;//100;
//размерность пакета записи, в частности пакета ИРУТ(28)
POCKETSIZE=28;
N=100;
//N=512;
//N=4096;
//количество пакетов в секунду
NUM_POCKET_IN_SEC=2000;
//частота опроса(дискретизации) медленных; Гц
SAMPLING_FREQ_SLOW=10;
//количество каналов медленных
NUM_SLOW_CHANAL=5;
//количество байт данных в пакете ГЕОС . 30 слов по 4 байта
NUM_BYTE_IN_GEOS_POCKET=120;
type
  TSignalGenForm = class(TForm)
    startGen: TButton;
    signalTimer: TTimer;
    SaveDialog1: TSaveDialog;
    Label1: TLabel;
    Label2: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure startGenClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure signalTimerTimer(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  //поток для записи
  TThreadWrite = class(TThread)
    private
    { Private declarations }
  protected
    procedure Execute; override;
  end;


  byteArray=array of byte;
  wordArray=array of word;

  TSlowPar=array[1..NUM_SLOW_CHANAL] of word;

  TGeosRec=record
    //1 слово GEOS 4 байта
    //колич. секунд от 1 января 2008 года  .8б
    time:int64;
    //широта. радианы 8б
    latitude:double;
    //долгота. радианы 8б
    longtitude:double;
    //высота над элипсоидом 8б
    hOnElps:double;
    //отклонение элипсоида от геоида 8б
    deflGeoid:double;
    //число КА 4
    KAnum:integer;
    //состояние приемника 4
    transStatus:integer;
    //GDOP 8
    gDop:double;
    //PDOP 8
    pDop:double;
    //TDOP 8
    tDop:double;
    //HDOP 8
    hDop:double;
    //VDOP 8
    vDop:double;
    //флаг достоверности 4
    flagD:integer;
    //колл. дост. решений  4
    countDes:integer;
    //скорость  8
    planV:double;
    //курс 8
    kurs:double;
    //контр. сумма 8
    sum:int64;
  end;


var
  thRead: TThreadWrite;
  SignalGenForm: TSignalGenForm;
  //счетчик пакетов для частоты вывода
  pocketCount:integer;
  fileStream:TFileStream;
  //счетчик пакетов для пуменрации запис. пакетов. 0..65535
  pocketCountWWrite:word;
  geosPocket:TGeosRec;

  //массив - пакет сигнала
  signalPocket: array[1..POCKETSIZE] of byte;
  Data: array[1..N] of byte = (127,162,185,188,172,143,115,98,101,124,158,192,
                               215,217,200,170,141,123,124,145,178,210,231,232,
                               212,181,149,129,128,147,177,208,227,225,204,171,
                               137,115,112,129,158,187,204,201,179,144,109,86,
                               82,98,126,154,171,168,146,111,76,53,49,65,94,
                               123,141,139,118,84,50,28,26,44,74,105,
                               124,125,105,74,42,22,22,41,74,107,128,131,114,
                               84,54,36,38,59,93,128,151,155,140,111,83,65,68,90);

   {data: array[1..N] of byte = (127,142,158,172,187,200,212,223,232,240,245,249,
                                251,251,249,245,240,232,223,212,200,187,173,158,
                                142,127,111,96,81,66,53,41,30,21,14,8,4,2,2,4,
                                8,13,21,30,41,53,66,80,95,110,126,142,157,172,
                                186,200,212,223,232,239,245,249,251,251,249,246,
                                240,232,223,212,200,187,173,158,143,127,111,96,
                                81,67,54,41,31,21,14,8,4,2,2,4,7,13,21,30,40,52,
                                66,80,95,110);}


 { Data: array[1..N] of byte = (127,142,158,172,187,200,212,223,232,240,245,249,
                                251,251,249,245,240,232,223,212,200,187,173,158,
                                142,127,111,96,81,66,53,41,30,21,14,8,4,2,2,4,
                                8,13,21,30,41,53,66,80,95,110,126,142,157,172,
                                186,200,212,223,232,239,245,249,251,251,249,246,
                                240,232,223,212,200,187,173,158,143,127,111,96,
                                81,67,54,41,31,21,14,8,4,2,2,4,7,13,21,30,40,52,
                                66,80,95,110,126,141,157,172,186,199,211,222,
                                232,239,245,249,251,251,249,246,240,233,223,213,
                                201,188,173,159,143,127,112,96,81,67,54,42,31,22,
                                14,8,4,2,2,4,7,13,20,29,40,52,65,79,94,110,125,
                                141,156,171,186,199,211,222,231,239,245,249,251,
                                251,250,246,240,233,224,213,201,188,174,159,144,
                                128,112,97,82,68,54,42,31,22,14,8,4,2,2,3,7,13,
                                20,29,40,52,65,79,94,109,125,141,156,171,185,
                                199,211,222,231,239,245,249,251,251,250,246,240,
                                233,224,213,201,188,174,159,144,128,113,97,82,
                                68,55,42,31,22,14,8,4,2,2,3,7,13,20,29,40,51,65,
                                79,94,109,125,140,156,171,185,198,211,221,231,
                                239,245,249,251,251,250,246,240,233,224,214,202,
                                189,175,160,144,129,113,98,83,68,55,43,32,22,14,
                                8,4,2,2,3,7,12,20,29,39,51,64,78,93,108,124,140,
                                155,170,185,198,210,221,231,239,245,249,251,251,
                                250,246,241,233,224,214,202,189,175,160,145,129,
                                113,98,83,69,55,43,32,22,15,8,4,2,2,3,7,12,20,
                                28,39,51,64,78,93,108,124,139,155,170,184,198,
                                210,221,230,238,244,249,251,251,250,246,241,
                                234,225,214,202,189,175,160,145,129,114,98,83,69,
                                55,43,32,23,15,9,4,2,2,3,7,12,19,28,39,51,64,78,
                                92,108,123,139,154,170,184,197,210,221,230,238,
                                244,249,251,251,250,246,241,234,225,214,203,190,
                                176,161,146,130,114,99,84,69,56,43,32,23,15,9,4,
                                2,2,3,7,12,19,28,38,50,63,77,92,107,123,139,154,
                                169,184,197,209,220,230,238,244,249,251,251,250,
                                246,241,234,225,215,203,190,176,161,146,130,115,
                                99,84,70,56,44,33,23,15,9,4,2,2,3,6,12,19,28,38,
                                50,63,77,92,107,123,138,154,169,183,197,209,220,
                                230,238,244,248);}


{  Data: array[1..N] of byte =
(252,251,248,243,236,227,217,206,193,179,164,149,133,117,101,85,71,57,44,32,
23,14,8,4,2,2,4,8,14,22,32,44,57,71,86,102,119,135,152,168,
183,198,211,222,232,240,246,250,251,251,248,242,235,226,214,201,187,172,155,138,
121,104,87,71,57,43,31,21,12,6,3,2,3,6,12,20,31,43,57,72,
89,106,124,141,159,176,191,206,219,230,239,246,250,251,251,247,241,233,222,209,
195,179,162,144,126,107,90,72,57,42,29,19,11,5,2,2,4,9,17,27,
40,54,70,88,106,124,143,162,179,196,211,224,234,243,248,251,251,248,242,234,
223,209,194,177,159,140,120,101,83,65,49,35,23,13,6,2,2,4,9,17,
28,41,57,74,93,112,132,152,171,189,205,220,232,241,248,251,251,248,242,233,
221,206,190,172,152,132,112,92,73,55,39,26,15,7,3,2,4,9,18,29,
44,60,79,98,119,140,160,180,198,214,228,238,246,251,251,249,243,233,221,206,
188,169,148,127,106,85,66,48,33,20,10,4,2,3,7,16,27,42,59,78,
99,120,142,163,183,202,218,231,242,248,251,250,246,237,226,211,193,174,152,130,
108,87,66,48,32,19,9,3,2,4,10,19,33,49,68,88,111,133,155,177,
197,214,229,240,248,251,251,246,237,225,209,190,170,147,124,101,79,59,41,25,
14,6,2,2,7,16,29,45,64,85,108,131,155,177,197,215,230,242,249,251,
250,244,233,219,202,181,159,136,112,88,66,47,30,16,7,2,2,6,15,28,
45,64,86,110,134,158,181,202,220,234,244,250,251,248,239,227,210,190,168,144,
119,95,72,51,33,18,8,2,2,6,15,29,46,67,90,114,139,164,187,208,
225,238,247,251,250,244,233,218,199,177,152,127,102,77,55,36,20,9,3,2,
6,15,29,47,69,93,118,144,169,192,213,230,242,249,251,248,240,226,208,187,
163,137,111,85,62,41,24,11,4,2,5,14,28,47,69,93,119,146,172,195,
216,232,244,250,251,246,236,220,200,177,151,124,98,72,49,30,15,6,2,3,
11,24,42,64,89,116,143,170,194,215,232,244,251,251,245,234,217,196,171,145,
117,90,64,42,24,11,3,2,7,17,33,54,79,106,134,161,187,210,229,242,
250,251,246,235,219,198,173,145,117,89,63,41,22,9,3,2,8,20,38,61,
87,115,143,171,197,218,235,247,251,250,241,227,207,183,155,127,98,70,46,26,
12,3,2,7,19,36,59,85,114,143,172,198,220,237,247,251,249,239,223,201,
176,147,118,89,62,38,20,7,2,3,12,27,48,73,102,131,161,189,213,232,
245,251,250,242,227,206,180,151,121,91,63,39,20,7,2,3,13,28,50,76,
106,136,166,194,218,236,247,251,248,237,220,197,169,139,108,78,51,29,13,3,
2,8,21,41,67,96,127,158,187,212,232,246,251,249,239,222,199,171,141,109,
79,51,29,12,3,2,9,23,45,71,101,133,164,193,218,237,248,251,247,234,
214,189,159,127,95,65,39,19,6,2,5,17,36,61,90,122,155,185,212,232,
246,251,248,237,218,193,163,131,98,67,41,20,7,2,5,17,37,63,93,126,
159,189,215,235,248,251,246,233,212,184,153,120,87,57,32,14,3,2,10,26,
49,78,110,144,176,205,228,244,251,249,238,219,193,162,129,95,64,37,17,5,
2,8,23,46,75,108,142,175,204,228,244,251,249,237,217,190,159,124,90,59,
33,14,3,2,11,28,54,84,118,153,186,214,235,248,251,245,229,206,176,142,
107,73,44,21,7,2,6,21,44,73,107,142,176,206,230,246,251,247,233,211,
181,147,112,77,47,23,7,2,6,20,43,73,107,143,178,208,232,247,251,246,
231,207,176,141,105,70,41,18,5,2,9,26,52,84,120,156,190,218,239,250,
250,240,220,192,159,122,86,53,27,9,2,5,19,42,72,108,145,180,211,234,
248,251,244,225,199,165,129,92,58,30,11,2,4,17,40,71,106,144,180,211,
235,248,251,243,224,196,162,124,87,53,26,9,2,6,21,47,79,116,154,189,
219,240,250,250,237,214,183,147,109,72,41,17,4,2,12,33,63,98,137,174,
207,232,248,251,243,224,195,160,121,83,49,23,6,2,9,27,56,91,129,168,
202,229,246,251,245,226,198,162,124,85,50,23,7,2,9,28,57,93,132,171,
205,231,247,251,243,222,192,156,116,77,44,19,4,2,13,35,67,105,145,183,
215,238,250,249,236,211,178,139,99,61,31,10,2,6,23,51,87,127,166,202,
230,247,251,242,221,190,152,112,73,39,15,3,4,18,43,78,118,158,196,226,
245,251,245,225,195,157,116,76,42,16,3,3,17,43,77,118,159,196,226,246,
251,244,223,191,153,111,71,38,14,2,5,21,49,85,127,168,204,232,248,251,
239,215,180,140,98,59,28,8,2,9,31,63,102,145,185,218,241,251,247,228,
198,160,117,76,41,15,3,4,20,49,86,129,171,208,235,250,250,235,208,171,
129,87,49,20,4,3,16,42,79,121,164,202,232,248,251,238,212,175,133,90,
51,22,5,2,15,42,79,121,165,203,232,249,250,236,209,172,129,85,47,19,
3,4,19,48,86,130,173,210,237,251,248,231,200,160,116,73,37,12,2,7,
27,60,102,146,188,222,244,251,243,219,183,141,96,55,24,5,2,16,43,81,
126,170,209,237,250,248,230,198,157,112,69,33,10,2,10,33,69,112,157,199,
230,248,250,236,207,167,122,77,39,13,2,7,29,63,106,152,194,228,247,251,
237,209,170,124,79,40,13,2,7,29,64,107,153,196,229,248,250,236,206,165,
119,74,36,11,2,9,33,71,115,162,203,234,250,249,230,197,154,107,63,28,
7,2,15,44,84,131,177,216,242,251,244,219,181,135,89,47,17,2,6,26,
62,106,153,197,230,249,250,233,200,157,109,64,28,6,2,16,46,88,135,182,
220,244,251,240,212,172,124,77,38,11,2,11,37,77,124,171,212,240,251,244,
219,180,133,85,43,14,2,8,33,71,118,166,209,238,251,245,221,182,135,87,
44,14,2,8,33,72,119,168,210,239,251,244,219,179,131,82,41,12,2,10,
37,78,127,175,216,243,251,241,212,169,120,72,33,8,2,16,47,91,140,188,
225,247,250,233,199,153,103,57,22,3,5,26,63,110,160,205,237,251,245,220,
180,131,81,39,11,2,13,43,86,136,185,224,247,250,233,199,152,101,55,20,
3,6,29,69,118,168,212,241,251,241,211,168,117,68,29,6,3,21,57,105,
156,202,236,251,245,219,177,127,77,35,8,2,17,51,97,149,197,233,250,247,
222,182,131,80,37,9,2,16,49,96,148,196,232,250,247,222,181,130,79,36,
9,2,17,52,99,152,200,235,251,245,218,175,124,72,31,6,3,22,59,108,
161,208,240,251,241,210,164,111,61,23,3,6,30,72,123,176,219,246,251,233,
196,147,93,46,14,2,12,44,91,144,194,232,250,246,220,176,124,71,29,5,
4,25,65,116,169,215,244,251,235,199,149,95,47,14,2,13,45,93,148,198,
235,251,244,215,169,115,63,23,3,6,32,76,130,183,225,248,249,225,183,130,
77,32,6,3,24,64,117,171,217,245,251,232,193,141,86,39,9,2,19,57,
109,164,212,243,251,235,198,146,91,43,11,2,17,54,106,161,210,242,251,236,
199,147,91,43,11,2,18,56,107,163,212,243,251,234,195,143,87,39,9,2,
21,61,114,170,217,246,250,230,188,134,78,32,6,4,27,71,126,181,225,249,
248,221,176,120,65,23,3,8,37,85,142,195,235,251,242,209,158,101,49,14,
2,16,53,106,163,212,244,251,231,190,135,78,32,5,4,29,75,132,187,230,
250,245,214,164,107,53,16,2,14,51,104,162,212,244,251,230,188,132,75,29,
4,6,34,81,139,194,234,251,241,206,153,95,43,10,2,22,64,120,178,224,
249,247,218,169,111,56,17,2,14,52,106,165,215,246,250,227,181,123,66,23,
2,10,43,96,155,208,242,251,232,189,131,73,27,3,7,39,90,149,203,240,
251,234,192,135,77,29,4,7,37,88,147,202,240,251,234,192,135,76,28,4,
7,38,90,150,205,241,251,232,189,131,72,25,3,9,43,96,157,210,244,250,
228,181,122,64,20,2,13,51,107,167,218,247,248,220,170,109,52,14,2,19,
63,121,181,228,250,243,208,153,92,39,7,4,30,80,140,198,238,251,234,191,
132,72,25,2,10,46,102,163,216,247,248,220,169,107,50,12,2,22,68,129,
189,233,251,239,199,140,79,29,3,8,42,98,160,214,246,249,221,169,107,50,
12,2,24,71,133,192,236,251,236,193,133,71,24,2,12,51,109,171,222,249,
245,211,155,92,38,6,5,35,89,152,209,244,250,224,173,110,51,12,2,25,
73,136,196,238,251,232,186,124,63,18,2,17,62,123,185,232,251,238,196,135,
73,24,2,13,54,113,177,227,251,242,202,143,79,28,3,10,49,108,172,224,
250,243,205,147,82,30,3,9,47,106,170,223,250,244,206,147,82,30,3,10,
48,107,172,224,250,243,204,144,79,27,3,11,52,112,177,228,251,240,198,137,
72,23,2,15,59,121,185,233,251,236,190,126,63,17,2,21,69,133,196,239,
251,228,177,112,51,11,3,29,83,149,209,245,249,218,161,95,37,5,7,42,
102,168,222,250,243,202,141,75,24,2,15,60,124,189,236,251,232,182,116,53,
12,3,29,84,151,210,246,248,214,155,88,32,3,10,50,113,179,230,251,236,
189,124,60,15,2,26,79,146,207,245,248,216,157,90,33,3,10,51,114,181,
232,251,234,186,119,55,12,3,30,86,154,214,248,246,208,146,79,25,2,16,
63,129,194,239,251,225,169,101,40,6,7,44,107,175,228,251,237,189,122,56,
12,3,31,88,157,216,249,244,203,139,72,20,2,21,73,141,205,245,248,215,
154,85,28,2,14,61,128,194,240,250,223,165,96,36,4,10,52,118,186,236,
251,228,173,104,41,6,7,47,111,180,232,251,232,179,109,45,7,6,43,107,
176,230,251,233,181,112,47,7,6,42,106,176,230,251,233,181,111,46,7,6,
44,108,178,232,251,231,177,107,43,6,7,47,113,183,235,251,228,171,101,38,
4,10,54,121,190,239,251,222,162,91,31,2,14,63,132,200,243,249,214,150,
79,23,2,21,75,146,211,248,244,202,135,65,15,2,31,91,163,223,251,237,
187,116,49,8,6,44,110,182,235,251,226,168,95,33,3,14,63,133,202,244,
248,210,144,72,19,2,27,86,159,221,251,238,188,117,49,7,7,47,114,186,
237,251,222,160,87,27,2,19,73,146,212,248,243,197,127,57,11,4,40,106,
179,234,251,226,165,92,30,2,17,71,143,210,248,243,198,127,56,10,5,42,
109,182,236,251,222,160,86,26,2,21,78,152,217,250,239,189,116,47,6,8,
52,123,195,242,249,211,144,70,17,2,32,96,171,230,251,228,169,94,31,2,
18,73,148,214,249,240,190,116,47,6,9,54,126,198,244,247,207,137,63,13,
4,39,107,182,236,251,220,154,79,21,2,28,91,167,228,251,229,169,93,30,
2,20,78,153,219,251,236,181,106,38,3,14,67,142,211,249,241,190,116,45,
5,10,59,133,205,247,244,197,123,51,7,8,54,127,200,245,246,201,129,55,
8,7,50,123,197,244,247,204,131,57,9,6,49,121,196,244,247,204,131,57,
9,6,50,123,197,244,246,202,129,55,8,7,52,126,200,246,245,199,124,51,
7,9,57,132,205,247,243,193,117,45,5,12,64,141,212,249,239,184,107,37,
3,17,74,152,220,251,233,173,95,29,2,24,86,165,228,251,225,159,81,20,
2,33,102,180,237,250,214,143,65,12,5,46,120,196,244,246,199,123,49,5,
11,63,141,213,250,237,180,101,33,2,22,84,163,228,251,224,157,78,18,3,
37,109,187,241,248,206,131,54,7,9,59,137,210,249,238,181,102,32,2,23,
86,167,230,251,221,151,71,14,4,44,118,196,245,245,195,117,43,4,15,73,
154,223,251,228,162,82,20,2,37,109,189,242,247,201,124,48,5,13,69,149,
220,251,230,165,84,20,2,37,109,189,242,247,200,122,46,4,14,73,154,223,
251,226,159,77,17,3,43,118,197,246,243,191,111,37,2,21,85,167,231,251,
217,144,63,10,7,56,136,211,250,235,173,91,24,2,34,106,187,242,247,199,
119,43,3,17,79,162,229,251,219,146,64,10,7,57,137,213,250,233,169,86,
21,2,38,114,194,245,243,190,108,34,2,24,93,176,237,249,207,128,49,5,
14,74,158,227,251,220,146,64,10,8,59,141,216,251,230,162,78,16,4,47,
126,205,249,237,176,92,23,2,37,113,195,246,242,187,103,30,2,30,102,185,
242,246,195,113,37,2,24,93,177,239,248,202,121,43,3,20,86,171,235,249,
207,127,47,4,17,82,167,233,250,210,131,50,4,16,79,164,232,250,211,132,
51,5,15,78,163,232,251,211,132,51,4,16,79,165,232,250,210,130,49,4,
17,82,168,234,250,207,126,45,3,20,87,173,237,249,202,120,40,2,23,94,
180,240,247,195,111,34,2,29,103,188,244,244,187,101,28,2,36,114,198,247,
239,176,89,20,3,45,127,208,250,232,163,76,13,6,57,142,219,251,223,147,
61,7,12,72,159,230,251,210,129,46,3,20,90,177,240,247,194,109,32,2,
33,110,196,247,239,175,87,19,4,49,133,214,251,226,152,65,8,11,71,158,
230,250,209,126,44,2,23,96,184,243,244,186,98,25,2,42,124,208,250,231,
158,70,10,9,67,155,229,251,210,127,44,2,24,98,186,244,242,182,93,21,
3,48,132,214,251,225,148,60,6,14,79,168,236,248,198,111,32,2,36,116,
202,249,233,162,73,11,9,68,157,230,250,206,121,38,2,30,108,196,248,237,
169,79,13,7,63,152,228,251,209,124,40,2,28,106,195,248,237,168,78,13,
8,65,154,229,250,206,120,37,2,32,112,200,249,233,161,71,10,10,73,163,
235,248,197,109,29,2,40,125,210,251,225,147,58,5,17,88,179,242,243,182,
91,19,4,56,145,224,251,211,125,40,2,30,111,200,249,232,158,67,8,13,
79,171,239,246,188,96,21,4,52,142,223,251,212,126,40,2,31,112,202,250,
230,154,63,6,16,86,178,242,243,180,87,16,6,62,154,230,250,201,111,30,
2,43,130,215,251,219,135,46,2,27,107,198,249,232,156,64,6,16,87,180,
243,242,175,82,13,8,69,162,235,248,192,100,22,4,54,145,226,251,206,116,
32,2,41,129,215,251,217,131,43,2,31,115,205,251,226,145,53,3,23,102,
195,248,233,157,63,6,17,91,185,246,238,167,72,9,13,82,177,243,242,175,
80,12,10,75,169,239,244,181,87,15,8,69,164,237,246,186,92,17,6,65,
159,235,247,190,96,19,5,62,156,233,248,192,98,20,5,61,155,233,248,193,
98,20,5,61,155,233,248,192,97,20,5,62,157,234,248,190,95,18,6,65,
160,236,247,186,91,16,7,69,165,238,245,181,85,14,9,75,171,241,243,175,
78,10,12,82,179,244,239,167,70,7,16,91,187,247,234,157,61,5,22,102,
197,250,228,145,51,2,29,115,207,251,219,131,40,2,39,129,218,251,209,116,
30,2,50,145,228,249,196,100,20,5,65,162,237,245,180,82,11,12,82,180,
245,237,161,64,5,21,102,198,250,226,140,46,2,34,124,215,251,210,117,30,
2,52,148,230,248,191,93,16,8,73,172,242,240,167,69,6,19,99,196,250,
226,140,46,2,36,127,218,251,206,111,26,4,59,157,236,246,181,81,11,13,
87,186,247,232,150,53,2,30,119,213,251,211,117,29,3,56,154,234,246,182,
82,11,13,88,187,248,231,147,50,2,34,125,217,251,205,109,24,5,64,164,
239,243,171,71,6,20,102,200,251,221,131,37,2,47,144,229,248,188,88,13,
11,85,185,248,231,147,49,2,36,129,221,251,200,101,19,7,73,175,244,237,
157,57,3,30,120,215,251,206,108,23,5,68,169,242,239,162,61,4,27,116,
212,251,208,110,24,5,67,168,242,239,161,60,3,28,119,214,251,205,107,21,
6,71,173,244,236,155,55,2,33,126,220,251,198,98,16,9,81,183,247,230,
143,45,2,42,140,228,248,186,83,10,15,96,197,251,220,126,32,3,57,158,
238,242,168,65,4,27,117,214,251,203,103,19,8,78,181,247,230,142,44,2,
45,144,232,247,179,76,7,20,107,207,251,210,111,23,6,72,176,246,233,147,
47,2,43,142,231,247,180,76,7,21,108,208,251,208,107,20,7,77,181,247,
229,139,40,2,50,152,236,243,169,65,4,29,122,219,251,195,92,13,13,94,
197,251,217,119,27,4,68,173,245,233,146,45,2,46,148,234,244,171,66,4,
29,123,220,250,193,88,11,16,100,203,251,211,111,21,7,78,184,248,226,132,
34,3,59,164,242,237,153,49,2,43,145,233,245,171,65,4,30,126,223,249,
188,82,8,20,109,211,251,202,98,14,12,93,198,251,214,113,22,7,79,186,
249,223,127,30,4,67,173,246,231,140,39,2,56,162,242,237,152,48,2,47,
151,237,242,162,56,2,39,141,232,245,171,64,3,33,132,227,247,178,71,5,
28,125,223,249,185,77,6,25,119,219,250,190,82,8,22,114,215,251,193,86,
9,20,110,213,251,196,89,10,18,108,211,251,198,91,11,18,106,210,251,198,
91,11,17,106,210,251,198,91,10,18,107,211,251,197,89,10,19,110,213,251,
194,86,9,21,113,216,250,191,82,7,23,118,219,250,186,77,6,27,124,223,
248,180,71,4,31,131,228,247,173,64,3,37,140,233,244,165,56,2,44,149,
238,240,155,48,2,52,160,242,235,143,39,2,62,172,246,228,131,30,5,74,
184,249,219,117,22,8,87,196,251,209,102,14,14,102,209,251,196,86,8,23,
119,221,249,181,70,4,34,137,232,244,163,54,2,48,156,241,236,144,39,3,
65,176,248,224,123,25,7,84,195,251,209,101,13,16,106,213,251,190,78,5,
29,130,229,246,167,57,2,46,155,241,235,142,37,3,68,180,249,220,115,20,
10,94,204,251,199,88,8,24,122,224,247,173,61,2,43,152,240,236,144,37,
3,69,182,249,218,112,18,12,99,209,251,192,80,5,30,133,231,244,161,50,
2,55,167,246,227,127,26,7,87,199,251,202,91,9,23,123,225,247,169,57,
2,49,161,244,230,131,28,6,84,196,251,203,92,9,23,123);}



  //байтовый массив записываемый в файл;
  arrayOfByte:byteArray;
  //счетчик номера позиции в байтовом массиве
  iArrayOfByte:integer;
  //массив слов значений записываемых в файл
  wordArr:wordArray;
  //счетчик номера позиции в массиве слов
  iWordArr:integer;
  //счетчик перебора данных сигнального массива
  dataCount:integer;
  countWriteByteInFile:cardinal;
  //храним значение медленных
  slowVal:word;

  //бинарный файл сигнала
  signalFile:file;


  //массив медленных параметров
  arrSlowParam:TSlowPar;
  pocketOffset:integer;
  countReadSlowP:integer;

  //счетчик прошедших секунд
  timeCount:integer;

  //счетчик выборки из массива слов
  wordCount:integer;
  koef:integer;
  koefVibSlowP:integer;
  pocketOffsetSlowP:integer;
  flag:boolean;
implementation

uses Math;

{$R *.dfm}




//==============================================================================
//
//==============================================================================
procedure WriteByteToByte(multiByteValue: byte;var arrayOfByte:byteArray;
  var arrayIndex:integer); overload;
var
  j: integer;
begin
  //зависит от кол. байт переданной переменной
  for j := 1 to SizeOf(multiByteValue) do
  begin
    //заказали байт под данные
    SetLength(arrayOfByte,arrayIndex+1);
    //наложение байтовой маски и запись в массив
    arrayOfByte[arrayIndex] := multiByteValue and 255;
    inc(arrayIndex);
    //записываем на место младшего байта старший
    multiByteValue := multiByteValue shr 8;
  end;
end;

procedure WriteByteToByte(multiByteValue: word; var  arrayOfByte:byteArray;
  var arrayIndex:integer); overload;
var
  j: integer;
begin
  for j := 1 to SizeOf(multiByteValue) do
  begin
    //заказали байт под данные
    SetLength(arrayOfByte,arrayIndex+1);
    arrayOfByte[arrayIndex] := multiByteValue and 255;
    inc(arrayIndex);
    multiByteValue := multiByteValue shr 8;
  end;
end;
//==============================================================================


//==============================================================================
//Запись медленных в пакет. Возвращает записаное значение медленных
//==============================================================================
procedure WriteSlowVal(pocketCount:word; var offsetCount:integer;
  var arrSlowP:TSlowPar; var iArrSlowPPrev:integer);
begin
//pocketCount-номер пакета, offsetCount-смещение для записи значений быстрых в нужные пакеты
//arrSlowP-массив значений медленных параметров для заполнения файла
//iArrSlowPPrev-счетчик для правильной выборки повторяющихся значений медленных

//запись в пакет медленных 2 байта медленных. Всего их 10. 5 раз по 2 байта

//запись медленных с 0 пакета


if (pocketCount mod (round(NUM_POCKET_IN_SEC/SAMPLING_FREQ_SLOW)+(offsetCount-1)))=0 then
  begin
    arrSlowP[offsetCount]:=Random(High(word));
    WriteByteToByte(arrSlowP[offsetCount],arrayOfByte,iArrayOfByte);
    inc(offsetCount);
    if offsetCount>NUM_SLOW_CHANAL then
      begin
        offsetCount:=1;
      end;
  end
else
  begin
    WriteByteToByte(arrSlowP[iArrSlowPPrev],arrayOfByte,iArrayOfByte);
    inc(iArrSlowPPrev);
    if iArrSlowPPrev>NUM_SLOW_CHANAL then
      begin
        iArrSlowPPrev:=1;
      end;
  end;
end;
//==============================================================================

//==============================================================================
//Запись данных с ГЕОС пакет
//==============================================================================
procedure WriteGEOSParam(pocketCount:word; var offsetCount:integer);
begin
//запись в пакет с ГЕОС
if (pocketCount mod (NUM_POCKET_IN_SEC+offsetCount))=0 then
  begin

  end;

end;
//==============================================================================


//==============================================================================
//Запись данных в массив слов
//==============================================================================
procedure WriteToWordArray(multiByteValue: integer; var  arrayOfWord:wordArray;
  var arrayIndex:integer); overload;
var
  j: integer;
begin
  j:=1;
  while j<=SizeOf(multiByteValue) do
  begin
    //заказали байт под данные
    SetLength(arrayOfWord,arrayIndex+1);
    //накладываем маску 2 байта
    arrayOfWord[arrayIndex] := multiByteValue and 65535;
    inc(arrayIndex);
    //сдвигаем по 2 байта
    multiByteValue := multiByteValue shr 16;
    j:=j+2;
  end;
end;

procedure WriteToWordArray(multiByteValue: int64; var  arrayOfWord:wordArray;
  var arrayIndex:integer); overload;
var
  j: integer;
begin
  j:=1;
  while j<=SizeOf(multiByteValue) do
  begin
    //заказали байт под данные
    SetLength(arrayOfWord,arrayIndex+1);
    //накладываем маску 2 байта
    arrayOfWord[arrayIndex] := multiByteValue and 65535;
    inc(arrayIndex);
    //сдвигаем по 2 байта
    multiByteValue := multiByteValue shr 16;
    j:=j+2;
  end;
end;

procedure WriteToWordArray(multiByteValue: double; var  arrayOfWord:wordArray;
  var arrayIndex:integer); overload;
var
  j: integer;
  Pword: ^word;
begin
  j:=1;
  Pword:=@multiByteValue;
  while j<=SizeOf(multiByteValue) do
  begin
    //заказали байт под данные
    SetLength(arrayOfWord,arrayIndex+1);
    arrayOfWord[arrayIndex]:=pWord^;
    inc(arrayIndex);
    inc(pWord);
    j:=j+2;
  end;
end;

//==============================================================================



//==============================================================================
//Генератор пакета
//==============================================================================
procedure GenPocket(var pocketC:integer);
var
i:integer;
wordNull:word;
begin
{if pocketCountWWrite=2046 then
  begin
    ShowMessage('11');
  end;}

//запись счетчика. 2 байта
WriteByteToByte(pocketCountWWrite,arrayOfByte,iArrayOfByte);

//запись быстрых. 24 байта
for i:=1 to POCKETSIZE-4 do
  begin
    //при переходе за пределы значений начинаем сначала
    if dataCount>length(data) then
      begin
        dataCount:=1;
      end;
    //SignalGenForm.Memo1.Lines.Add(intTostr(data[dataCount]));
    WriteByteToByte(data[dataCount],arrayOfByte,iArrayOfByte);
  end;
  inc(dataCount);
  i:=i+2;


//сформируем значения с ГЕОС. И запишем их в массив слов по 2байта
//формируем каждые 2000
if (pocketCountWWrite mod NUM_POCKET_IN_SEC)=0 then
  begin
    //пришел новый пакет данных с ГЕОС,
    //сбросим массив слов и счетчик слов
    wordArr:=nil;
    iWordArr:=0;

    geosPocket.time:=timeCount;
    WriteToWordArray(geosPocket.time,wordArr,iWordArr);
    inc(timeCount);
    if timeCount>=High(timeCount) then
      begin
        timeCount:=0;
      end;
    geosPocket.latitude:=0.947817116;
    WriteToWordArray(geosPocket.latitude,wordArr,iWordArr);
    geosPocket.longtitude:=0.639544114;
    WriteToWordArray(geosPocket.longtitude,wordArr,iWordArr);
    geosPocket.hOnElps:=10.0;
    WriteToWordArray(geosPocket.hOnElps,wordArr,iWordArr);
    geosPocket.deflGeoid:=10.0;
    WriteToWordArray(geosPocket.deflGeoid,wordArr,iWordArr);
    geosPocket.KAnum:=1;
    WriteToWordArray(geosPocket.KAnum,wordArr,iWordArr);
    geosPocket.transStatus:=10;
    WriteToWordArray(geosPocket.transStatus,wordArr,iWordArr);
    geosPocket.gDop:=10.0;
    WriteToWordArray(geosPocket.gDop,wordArr,iWordArr);
    geosPocket.pDop:=10.0;
    WriteToWordArray(geosPocket.pDop,wordArr,iWordArr);
    geosPocket.tDop:=10.0;
    WriteToWordArray(geosPocket.tDop,wordArr,iWordArr);
    geosPocket.hDop:=10.0;
    WriteToWordArray(geosPocket.hDop,wordArr,iWordArr);
    geosPocket.vDop:=10.0;
    WriteToWordArray(geosPocket.vDop,wordArr,iWordArr);
    geosPocket.flagD:=1;
    WriteToWordArray(geosPocket.flagD,wordArr,iWordArr);
    geosPocket.countDes:=10;
    WriteToWordArray(geosPocket.countDes,wordArr,iWordArr);
    //зададим скорость случайным образом от 30 до 150 км\ч
    geosPocket.planV:=RandomRange(30,150);
    WriteToWordArray(geosPocket.planV,wordArr,iWordArr);
    geosPocket.kurs:=111.0;
    WriteToWordArray(geosPocket.kurs,wordArr,iWordArr);
    geosPocket.sum:=777;
    WriteToWordArray(geosPocket.sum,wordArr,iWordArr);
  end;


//запись данных с ГЕОС
//NUM_BYTE_IN_GEOS_POCKET/2-сколько пакетов должны заполнить 0..59
if ((pocketCountWWrite>=0) and (pocketCountWWrite<=(NUM_BYTE_IN_GEOS_POCKET/2)-1)) then
  begin
  { if pocketCountWWrite=56 then
    begin
      ShowMessage('333');
    end;}

   WriteByteToByte(wordArr[wordCount],arrayOfByte,iArrayOfByte);
   inc(wordCount);
   //проверяем не последний ли это заполняемый пакет в начале
   if (pocketCountWWrite=(NUM_BYTE_IN_GEOS_POCKET/2)-1) then
    begin
      wordCount:=0;
    end;
  end
else
  begin
    {if pocketCountWWrite=3000 then
      begin
        ShowMessage('333');
      end;}

    if  ((pocketCountWWrite>=(NUM_BYTE_IN_GEOS_POCKET/2)) and
        (pocketCountWWrite<=(NUM_BYTE_IN_GEOS_POCKET/2+NUM_SLOW_CHANAL-1))) then
        begin
          //записываем данные медленных
          arrSlowParam[pocketOffset]:=2056{Random(High(word))};
          WriteByteToByte(arrSlowParam[pocketOffset],arrayOfByte,iArrayOfByte);
          inc(pocketOffset);
          if pocketOffset>NUM_SLOW_CHANAL then
            begin
              pocketOffset:=1;
            end;

        end
    else
        begin
          flag:=false;

          //проверяем нужно ли писать данные с ГЕОС каждые 2000 пакетов
          //koef-коэфициент масштабирования 1..N, для правильной выборки
          if (pocketCountWWrite mod (NUM_POCKET_IN_SEC*koef+(pocketOffset-1)))=0 then
            begin
              WriteByteToByte(wordArr[wordCount],arrayOfByte,iArrayOfByte);
              inc(wordCount);
              inc(pocketOffset);
              if wordCount>length(wordArr)-1 then
                begin
                  wordCount:=0;
                  pocketOffset:=1;
                  inc(koef);
                end;
              flag:=true;
            end;


           {if pocketCountWWrite=460 then
            begin
              ShowMessage('333');
            end;}

            //проверяем не пора ли вставить данные медленных через каждые 260 пакетов
            if (pocketCountWWrite mod (round(NUM_POCKET_IN_SEC/SAMPLING_FREQ_SLOW)*koefVibSlowP+
                  round(NUM_BYTE_IN_GEOS_POCKET/2)+(pocketOffsetSlowP-1)))=0 then
              begin
                arrSlowParam[pocketOffsetSlowP]:=2056{Random(High(word))};
                WriteByteToByte(arrSlowParam[pocketOffsetSlowP],arrayOfByte,iArrayOfByte);
                inc(pocketOffsetSlowP);
                if pocketOffsetSlowP>NUM_SLOW_CHANAL then
                  begin
                    pocketOffsetSlowP:=1;
                    inc(koefVibSlowP);
                  end;
                flag:=true;
              end;

            {if pocketCountWWrite=260 then
              begin
                ShowMessage('333');
              end;}


            if (not flag) then
              begin
                //двухбайтовый 0 для записи. В случае если в этих пакетах данные передаваться не должны
                wordNull:=0;
                WriteByteToByte(wordNull,arrayOfByte,iArrayOfByte);
              end;

        end;
  end;
inc(pocketCountWWrite);
//проверка на переполнения
if pocketCountWWrite>High(pocketCountWWrite) then
  begin
    pocketCountWWrite:=0;
  end;
inc(pocketC);
end;
//==============================================================================

//==============================================================================
//Запись переданного количества пакетов
//==============================================================================
procedure WritePocket;
var
i:integer;
begin
  try
    BlockWrite(signalFile,arrayOfByte[0],length(arrayOfByte)*Sizeof(byte));
  finally

  end;
end;
//==============================================================================

procedure TSignalGenForm.FormCreate(Sender: TObject);
begin
pocketCount:=0;
pocketCountWWrite:=0;
dataCount:=1;
countWriteByteInFile:=0;
koef:=1;
koefVibSlowP:=1;

end;

procedure TSignalGenForm.startGenClick(Sender: TObject);
begin
if SignalGenForm.startGen.Caption='Gen' then
    begin
      //предустановочные значения
      pocketOffset:=1;
      pocketOffsetSlowP:=1;
      countReadSlowP:=1;
      timeCount:=0;

      SignalGenForm.startGen.Caption:='Stop';
      ShowMessage('Введите название файла сигнала');
      if SignalGenForm.SaveDialog1.Execute then
        begin
          //создаем файловый поток.
          //создаем файл с указаным именем, если файл создан то открываем на запись
          //fileStream:=TFileStream.Create(SignalGenForm.SaveDialog1.FileName,fmCreate);
          AssignFile(signalFile,SignalGenForm.SaveDialog1.FileName);
          rewrite(signalFile,1);
          SignalGenForm.signalTimer.Enabled:=true;
          //запускаем поток на запись
          thRead:=TThreadWrite.Create(False);
          thRead.Priority:=tpNormal;
       end
      else
       begin
          ShowMessage('Ошибка!');
       end;
    end
  else
    begin
      SignalGenForm.startGen.Caption:='Gen';

      //завершаем поток записи
      thRead.Terminate;
      //закрываем файл сигнала
      //fileStream.Free;
      //CloseFile(signalFile);
    end;


end;

//==============================================================================
//
//==============================================================================
procedure TThreadWrite.Execute;
begin
  while (true) do
    begin
      if thRead.Terminated then
        begin
          SignalGenForm.signalTimer.Enabled:=false;
          break;
        end;  

      GenPocket(pocketCount);

      if pocketCount=NUM_WRITE_POCKET then
        begin
          WritePocket;
          //записываем количество записанных в файл бaйт
          countWriteByteInFile :=countWriteByteInFile+iArrayOfByte;
          arrayOfByte:=nil;
          iArrayOfByte:=0;
          //барьер переполнения счетчика байт
          if countWriteByteInFile>High(countWriteByteInFile) then
            begin
              countWriteByteInFile:=0;
            end;

          pocketCount:=0;
        end;

    end;

end;
//==============================================================================


procedure TSignalGenForm.FormDestroy(Sender: TObject);
begin
thRead.Terminate;
showMessage('Файл записан!');
CloseFile(signalFile);
end;

procedure TSignalGenForm.signalTimerTimer(Sender: TObject);
begin
SignalGenForm.Label2.Caption:=IntToStr(countWriteByteInFile)+' '+'байт';
end;

end.
